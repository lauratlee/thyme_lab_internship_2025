# base code originally generated by ChatGPT and then modified accordingly to suit purposes
# given a .csv of human-zebrafish pairs, generates a .fasta file containing the sequences of all the zebrafish genes
# example usage (to be run from /outputs): python blast_database_generator.py [csv file]

import os, sys, re
import pandas as pd
import pymol2

csv_file = sys.argv[1]
df = pd.read_csv(csv_file)

# get threshold from input file name
match = re.search(r"filtered_(\d+(?:\.\d+)?)", csv_file)
if not match:
  raise ValueError("Could not extract threshold number from filename.")

threshold = match.group(1)

# set output file name
output_path = f"zf_fasta_{threshold}.fasta"

# process input .csv file
with open(output_path, "w") as f_out:
  for index, row in df.iterrows():
    human_gene = str(row[0]).strip()
    zf_gene = str(row[1]).strip()
    gpcr_class = str(row[2]).strip()
    print(f"{human_gene}, {zf_gene}, {gpcr_class}")

    # construct path to zebrafish pocket pdb
    pocket_path = f"../gpcr_pocket_dir/{human_gene}/{gpcr_class}/{zf_gene}_pocket.pdb"

    if not os.path.isfile(pocket_path):
      print(f"[WARNING] Missing file {pocket_path}. Exiting program.")
      sys.exit(1)

    # initialize PyMOL2 in headless mode
    with pymol2.PyMOL() as pymol:
      # set the internal gui width
      pymol.cmd.set('internal_gui_width', 600)

      pocket_name = f"{zf_gene}_pocket"

      # load in zf pocket file
      pymol.cmd.load(pocket_path, pocket_name)

      if pymol.cmd.count_atoms(pocket_name) == 0: 
          print("[WARNING] Failed to load pocket structure")
          sys.exit(1)

      # get sequence
      sequence = pymol.cmd.get_fastastr(pocket_name).split('\n', 1)[1].replace('\n', '')
      if not sequence:
        print(f"[WARNING] No sequence found in {pocket_path}. Exiting program.")
        sys.exit(1)

      # write sequence in FASTA format
      f_out.write(f">{zf_gene}\n")
      for i in range (0, len(sequence), 60):
        f_out.write(sequence[i:i+60] + "\n")

      print(f"{zf_gene} FASTA done")
      
      

            
